
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DIVIDE DOT EQ EQUALS FOR GE GT IDENTIFIER LE LLAVE_ABIERTA LLAVE_CERRADA LPAREN LT MINUS NE NUMBER PLUS PRINTLN RPAREN SEMICOLON TIMESprogram : statement\n               | statement programstatement : FOR LPAREN declaration SEMICOLON condition SEMICOLON increment RPAREN LLAVE_ABIERTA statements LLAVE_CERRADAdeclaration : IDENTIFIER IDENTIFIER EQUALS expression\n                   | IDENTIFIER EQUALS expressioncondition : expression comparison_op expressioncomparison_op : LT\n                     | LE\n                     | GT\n                     | GE\n                     | EQ\n                     | NEincrement : IDENTIFIER PLUS PLUS\n                 | IDENTIFIER MINUS MINUS\n                 | IDENTIFIERstatements : statement\n                  | statement statementsstatement : IDENTIFIER DOT IDENTIFIER DOT PRINTLN LPAREN expression RPAREN SEMICOLONexpression : expression PLUS term\n                  | expression MINUS term\n                  | expression TIMES term\n                  | expression DIVIDE termexpression : termterm : NUMBERterm : IDENTIFIER'
    
_lr_action_items = {'FOR':([0,2,49,52,54,55,],[3,3,3,-18,3,-3,]),'IDENTIFIER':([0,2,6,7,9,11,13,20,23,24,25,26,27,28,29,30,31,32,33,34,36,49,52,54,55,],[4,4,9,10,12,19,19,19,38,19,19,19,19,19,-7,-8,-9,-10,-11,-12,19,4,-18,4,-3,]),'$end':([1,2,5,52,55,],[0,-1,-2,-18,-3,]),'LPAREN':([3,22,],[6,36,]),'DOT':([4,10,],[7,14,]),'SEMICOLON':([8,15,17,18,19,21,35,39,40,41,42,43,48,],[11,23,-23,-24,-25,-5,-4,-6,-19,-20,-21,-22,52,]),'EQUALS':([9,12,],[13,20,]),'NUMBER':([11,13,20,24,25,26,27,28,29,30,31,32,33,34,36,],[18,18,18,18,18,18,18,18,-7,-8,-9,-10,-11,-12,18,]),'PRINTLN':([14,],[22,]),'PLUS':([16,17,18,19,21,35,38,39,40,41,42,43,44,46,],[25,-23,-24,-25,25,25,46,25,-19,-20,-21,-22,25,50,]),'MINUS':([16,17,18,19,21,35,38,39,40,41,42,43,44,47,],[26,-23,-24,-25,26,26,47,26,-19,-20,-21,-22,26,51,]),'TIMES':([16,17,18,19,21,35,39,40,41,42,43,44,],[27,-23,-24,-25,27,27,27,-19,-20,-21,-22,27,]),'DIVIDE':([16,17,18,19,21,35,39,40,41,42,43,44,],[28,-23,-24,-25,28,28,28,-19,-20,-21,-22,28,]),'LT':([16,17,18,19,40,41,42,43,],[29,-23,-24,-25,-19,-20,-21,-22,]),'LE':([16,17,18,19,40,41,42,43,],[30,-23,-24,-25,-19,-20,-21,-22,]),'GT':([16,17,18,19,40,41,42,43,],[31,-23,-24,-25,-19,-20,-21,-22,]),'GE':([16,17,18,19,40,41,42,43,],[32,-23,-24,-25,-19,-20,-21,-22,]),'EQ':([16,17,18,19,40,41,42,43,],[33,-23,-24,-25,-19,-20,-21,-22,]),'NE':([16,17,18,19,40,41,42,43,],[34,-23,-24,-25,-19,-20,-21,-22,]),'RPAREN':([17,18,19,37,38,40,41,42,43,44,50,51,],[-23,-24,-25,45,-15,-19,-20,-21,-22,48,-13,-14,]),'LLAVE_ABIERTA':([45,],[49,]),'LLAVE_CERRADA':([52,53,54,55,56,],[-18,55,-16,-3,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,5,]),'statement':([0,2,49,54,],[2,2,54,54,]),'declaration':([6,],[8,]),'condition':([11,],[15,]),'expression':([11,13,20,24,36,],[16,21,35,39,44,]),'term':([11,13,20,24,25,26,27,28,36,],[17,17,17,17,40,41,42,43,17,]),'comparison_op':([16,],[24,]),'increment':([23,],[37,]),'statements':([49,54,],[53,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','app2.py',82),
  ('program -> statement program','program',2,'p_program','app2.py',83),
  ('statement -> FOR LPAREN declaration SEMICOLON condition SEMICOLON increment RPAREN LLAVE_ABIERTA statements LLAVE_CERRADA','statement',11,'p_statement_for','app2.py',87),
  ('declaration -> IDENTIFIER IDENTIFIER EQUALS expression','declaration',4,'p_declaration','app2.py',91),
  ('declaration -> IDENTIFIER EQUALS expression','declaration',3,'p_declaration','app2.py',92),
  ('condition -> expression comparison_op expression','condition',3,'p_condition','app2.py',99),
  ('comparison_op -> LT','comparison_op',1,'p_comparison_op','app2.py',103),
  ('comparison_op -> LE','comparison_op',1,'p_comparison_op','app2.py',104),
  ('comparison_op -> GT','comparison_op',1,'p_comparison_op','app2.py',105),
  ('comparison_op -> GE','comparison_op',1,'p_comparison_op','app2.py',106),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','app2.py',107),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','app2.py',108),
  ('increment -> IDENTIFIER PLUS PLUS','increment',3,'p_increment','app2.py',112),
  ('increment -> IDENTIFIER MINUS MINUS','increment',3,'p_increment','app2.py',113),
  ('increment -> IDENTIFIER','increment',1,'p_increment','app2.py',114),
  ('statements -> statement','statements',1,'p_statements','app2.py',121),
  ('statements -> statement statements','statements',2,'p_statements','app2.py',122),
  ('statement -> IDENTIFIER DOT IDENTIFIER DOT PRINTLN LPAREN expression RPAREN SEMICOLON','statement',9,'p_statement_print','app2.py',126),
  ('expression -> expression PLUS term','expression',3,'p_expression_binop','app2.py',130),
  ('expression -> expression MINUS term','expression',3,'p_expression_binop','app2.py',131),
  ('expression -> expression TIMES term','expression',3,'p_expression_binop','app2.py',132),
  ('expression -> expression DIVIDE term','expression',3,'p_expression_binop','app2.py',133),
  ('expression -> term','expression',1,'p_expression_term','app2.py',137),
  ('term -> NUMBER','term',1,'p_term_number','app2.py',141),
  ('term -> IDENTIFIER','term',1,'p_term_identifier','app2.py',145),
]
