
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DIVIDE DOT EQ EQUALS FOR GE GT IDENTIFIER LE LLAVE_ABIERTA LLAVE_CERRADA LPAREN LT MINUS NE NUMBER OUT PLUS PRINTLN RPAREN SEMICOLON SYSTEM TIMESprogram : statement\n               | statement programstatement : FOR LPAREN declaration SEMICOLON condition SEMICOLON increment RPAREN LLAVE_ABIERTA statements LLAVE_CERRADAdeclaration : IDENTIFIER EQUALS expressioncondition : expression comparison_op expressioncomparison_op : LT\n                     | LE\n                     | GT\n                     | GE\n                     | EQ\n                     | NEincrement : IDENTIFIER PLUS PLUS\n                 | IDENTIFIER MINUS MINUSstatements : statement\n                  | statement statementsstatement : SYSTEM DOT OUT DOT PRINTLN LPAREN expression RPAREN SEMICOLONexpression : expression PLUS term\n                  | expression MINUS term\n                  | expression TIMES term\n                  | expression DIVIDE termexpression : termterm : NUMBERterm : IDENTIFIER'
    
_lr_action_items = {'FOR':([0,2,46,49,51,52,],[3,3,3,-16,3,-3,]),'SYSTEM':([0,2,46,49,51,52,],[4,4,4,-16,4,-3,]),'$end':([1,2,5,49,52,],[0,-1,-2,-16,-3,]),'LPAREN':([3,20,],[6,33,]),'DOT':([4,10,],[7,13,]),'IDENTIFIER':([6,11,12,21,22,23,24,25,26,27,28,29,30,31,32,33,],[9,18,18,35,18,18,18,18,18,-6,-7,-8,-9,-10,-11,18,]),'OUT':([7,],[10,]),'SEMICOLON':([8,14,16,17,18,19,36,37,38,39,40,45,],[11,21,-21,-22,-23,-4,-5,-17,-18,-19,-20,49,]),'EQUALS':([9,],[12,]),'NUMBER':([11,12,22,23,24,25,26,27,28,29,30,31,32,33,],[17,17,17,17,17,17,17,-6,-7,-8,-9,-10,-11,17,]),'PRINTLN':([13,],[20,]),'PLUS':([15,16,17,18,19,35,36,37,38,39,40,41,43,],[23,-21,-22,-23,23,43,23,-17,-18,-19,-20,23,47,]),'MINUS':([15,16,17,18,19,35,36,37,38,39,40,41,44,],[24,-21,-22,-23,24,44,24,-17,-18,-19,-20,24,48,]),'TIMES':([15,16,17,18,19,36,37,38,39,40,41,],[25,-21,-22,-23,25,25,-17,-18,-19,-20,25,]),'DIVIDE':([15,16,17,18,19,36,37,38,39,40,41,],[26,-21,-22,-23,26,26,-17,-18,-19,-20,26,]),'LT':([15,16,17,18,37,38,39,40,],[27,-21,-22,-23,-17,-18,-19,-20,]),'LE':([15,16,17,18,37,38,39,40,],[28,-21,-22,-23,-17,-18,-19,-20,]),'GT':([15,16,17,18,37,38,39,40,],[29,-21,-22,-23,-17,-18,-19,-20,]),'GE':([15,16,17,18,37,38,39,40,],[30,-21,-22,-23,-17,-18,-19,-20,]),'EQ':([15,16,17,18,37,38,39,40,],[31,-21,-22,-23,-17,-18,-19,-20,]),'NE':([15,16,17,18,37,38,39,40,],[32,-21,-22,-23,-17,-18,-19,-20,]),'RPAREN':([16,17,18,34,37,38,39,40,41,47,48,],[-21,-22,-23,42,-17,-18,-19,-20,45,-12,-13,]),'LLAVE_ABIERTA':([42,],[46,]),'LLAVE_CERRADA':([49,50,51,52,53,],[-16,52,-14,-3,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,5,]),'statement':([0,2,46,51,],[2,2,51,51,]),'declaration':([6,],[8,]),'condition':([11,],[14,]),'expression':([11,12,22,33,],[15,19,36,41,]),'term':([11,12,22,23,24,25,26,33,],[16,16,16,37,38,39,40,16,]),'comparison_op':([15,],[22,]),'increment':([21,],[34,]),'statements':([46,51,],[50,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','app2.py',86),
  ('program -> statement program','program',2,'p_program','app2.py',87),
  ('statement -> FOR LPAREN declaration SEMICOLON condition SEMICOLON increment RPAREN LLAVE_ABIERTA statements LLAVE_CERRADA','statement',11,'p_statement_for','app2.py',91),
  ('declaration -> IDENTIFIER EQUALS expression','declaration',3,'p_declaration','app2.py',95),
  ('condition -> expression comparison_op expression','condition',3,'p_condition','app2.py',99),
  ('comparison_op -> LT','comparison_op',1,'p_comparison_op','app2.py',103),
  ('comparison_op -> LE','comparison_op',1,'p_comparison_op','app2.py',104),
  ('comparison_op -> GT','comparison_op',1,'p_comparison_op','app2.py',105),
  ('comparison_op -> GE','comparison_op',1,'p_comparison_op','app2.py',106),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','app2.py',107),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','app2.py',108),
  ('increment -> IDENTIFIER PLUS PLUS','increment',3,'p_increment','app2.py',112),
  ('increment -> IDENTIFIER MINUS MINUS','increment',3,'p_increment','app2.py',113),
  ('statements -> statement','statements',1,'p_statements','app2.py',117),
  ('statements -> statement statements','statements',2,'p_statements','app2.py',118),
  ('statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN expression RPAREN SEMICOLON','statement',9,'p_statement_print','app2.py',122),
  ('expression -> expression PLUS term','expression',3,'p_expression_binop','app2.py',126),
  ('expression -> expression MINUS term','expression',3,'p_expression_binop','app2.py',127),
  ('expression -> expression TIMES term','expression',3,'p_expression_binop','app2.py',128),
  ('expression -> expression DIVIDE term','expression',3,'p_expression_binop','app2.py',129),
  ('expression -> term','expression',1,'p_expression_term','app2.py',133),
  ('term -> NUMBER','term',1,'p_term_number','app2.py',137),
  ('term -> IDENTIFIER','term',1,'p_term_identifier','app2.py',141),
]
